#include <WiFi.h>
#include <WebServer.h>
#include <BluetoothSerial.h>

// Replace with your network credentials
const char* ssid = "SSID";
const char* password = "PASSWORD";

// Define the pins for the LEDs
const int ledPins[] = {12, 13, 14};

// Define the pin for the current sensor input
const int sensorIn = 34;  // Use GPIO34 for analog input
int mVperAmp = 300;       // Use 185 for 5A, 100 for 20A Module, and 66 for 30A Module

// Variables to hold the sensor readings
double Voltage = 0;
double VRMS = 0;
double AmpsRMS = 0;
double Wattage = 0;

// Create an instance of the web server on port 80
WebServer server(80);

// Create a BluetoothSerial object
BluetoothSerial SerialBT;

// HTML content with updated styling and added elements for graph and on-time display
const char MAIN_page[] PROGMEM = R"rawliteral(
<!DOCTYPE html>
<html>
<head>
  <title>ESP32 LED and Power Control</title>
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <style>
    body { font-family: Arial, sans-serif; text-align: center; }
    .button { display: inline-block; padding: 10px 20px; font-size: 20px; margin: 20px; cursor: pointer; background-color: #4CAF50; color: white; border: none; }
    .button-on { background-color: #FF0000; }
    .button-off { background-color: #4CAF50; }
    .power-display, .led-time-display, .graph-container { margin-top: 20px; font-size: 18px; }
    canvas { max-width: 100%; height: auto; }
  </style>
</head>
<body>
  <h1>ESP32 LED and Power Control</h1>
  <button id="led1" class="button button-off" onclick="toggleLED(0)">Toggle LED 1</button>
  <button id="led2" class="button button-off" onclick="toggleLED(1)">Toggle LED 2</button>
  <button id="led3" class="button button-off" onclick="toggleLED(2)">Toggle LED 3</button>

  <div class="power-display">
    <h2>Current Power Reading:</h2>
    <p id="powerReading">Loading...</p>
  </div>

  <div class="led-time-display">
    <h2>LED On-Time (seconds):</h2>
    <p id="ledTimes">Loading...</p>
  </div>

  <div class="graph-container">
    <h2>Power Consumption Over Time:</h2>
    <canvas id="powerChart"></canvas>
  </div>

  <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
  <script>
    var powerChartCtx = document.getElementById('powerChart').getContext('2d');
    var powerChart = new Chart(powerChartCtx, {
      type: 'line',
      data: {
        labels: [],
        datasets: [{
          label: 'Power (Watts)',
          data: [],
          borderColor: 'rgba(75, 192, 192, 1)',
          backgroundColor: 'rgba(75, 192, 192, 0.2)',
          fill: false
        }]
      },
      options: {
        responsive: true,
        scales: {
          x: { display: true, title: { display: true, text: 'Time (s)' } },
          y: { display: true, title: { display: true, text: 'Power (W)' } }
        }
      }
    });

    function toggleLED(led) {
      var xhr = new XMLHttpRequest();
      xhr.open("GET", "/toggle?led=" + led, true);
      xhr.onreadystatechange = function () {
        if (xhr.readyState == 4 && xhr.status == 200) {
          document.getElementById('led' + (led + 1)).classList.toggle('button-on');
          document.getElementById('led' + (led + 1)).classList.toggle('button-off');
        }
      };
      xhr.send();
    }

    function updatePowerReading() {
      var xhr = new XMLHttpRequest();
      xhr.open("GET", "/power", true);
      xhr.onreadystatechange = function () {
        if (xhr.readyState == 4 && xhr.status == 200) {
          document.getElementById("powerReading").innerHTML = xhr.responseText.split(',')[1].trim();
          updateGraph(xhr.responseText.split(',')[1].trim());
        }
      };
      xhr.send();
    }

    function updateGraph(power) {
      var time = new Date().toLocaleTimeString();
      powerChart.data.labels.push(time);
      powerChart.data.datasets[0].data.push(parseFloat(power));
      powerChart.update();
    }

    function updateLEDTimes() {
      var xhr = new XMLHttpRequest();
      xhr.open("GET", "/ledtimes", true);
      xhr.onreadystatechange = function () {
        if (xhr.readyState == 4 && xhr.status == 200) {
          document.getElementById("ledTimes").innerHTML = xhr.responseText;
        }
      };
      xhr.send();
    }

    setInterval(updatePowerReading, 1000);  // Update every second
    setInterval(updateLEDTimes, 1000);  // Update LED times every second
  </script>
</body>
</html>
)rawliteral";

// Variables to hold the LED states and on-times
bool ledStates[] = {LOW, LOW, LOW};
unsigned long ledStartTime[] = {0, 0, 0};  // Start times for LEDs
unsigned long ledOnTime[] = {0, 0, 0};  // Total on-times for LEDs in seconds

// Task Handles
TaskHandle_t BluetoothTaskHandle;
TaskHandle_t WiFiTaskHandle;

// Wi-Fi Task
void WiFiTask(void *pvParameters) {
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(1000);
  }
  Serial.println("WiFi connected.");
  Serial.println(WiFi.localIP());

  server.on("/", handleRoot);
  server.on("/toggle", handleLEDToggle);
  server.on("/power", handlePowerReading);
  server.on("/ledtimes", handleLEDOnTime);
  server.begin();

  for (;;) {
    server.handleClient();
    delay(10);
  }
}

// Bluetooth Task
void BluetoothTask(void *pvParameters) {
  SerialBT.begin("ESP32_Control"); // Name of your Bluetooth interface -> will show up on your phone

  for (;;) {
    if (SerialBT.available()) {
      int incoming = SerialBT.read(); // Read what we receive

      // Separate button ID from button value -> button ID is 10, 20, 30, etc, value is 1 or 0
      int button = floor(incoming / 10);

      switch (button) {
        case 1:
          Serial.println("Toggling LED 1");
          toggleLEDState(0);
          break;
        case 2:
          Serial.println("Toggling LED 2");
          toggleLEDState(1);
          break;
        case 3:
          Serial.println("Toggling LED 3");
          toggleLEDState(2);
          break;
        default:
          Serial.println("Invalid Bluetooth command");
          break;
      }
    }
    delay(10);
  }
}

void setup() {
  Serial.begin(115200);
  for (int i = 0; i < 3; i++) {
    pinMode(ledPins[i], OUTPUT);
    digitalWrite(ledPins[i], ledStates[i]);
  }

  pinMode(sensorIn, INPUT);  // Set GPIO34 as input (for analogRead on ESP32, actually not needed but kept for consistency)

  xTaskCreatePinnedToCore(WiFiTask, "WiFiTask", 10000, NULL, 1, &WiFiTaskHandle, 0);
  delay(500);

  xTaskCreatePinnedToCore(BluetoothTask, "BluetoothTask", 10000, NULL, 1, &BluetoothTaskHandle, 1);
  delay(500);
}

void loop() {
  // Nothing to do here; tasks are handled by cores
}

void handleRoot() {
  server.send(200, "text/html", MAIN_page);
}

void handleLEDToggle() {
  if (server.hasArg("led")) {
    int led = server.arg("led").toInt();
    if (led >= 0 && led < 3) {
      toggleLEDState(led);
    }
  }
  server.send(200, "text/plain", "LED toggled");
}

void handlePowerReading() {
  Voltage = getVPP();  // Get the peak-to-peak voltage from the sensor
  VRMS = (Voltage / 2.0) * 0.707;  // Calculate RMS voltage
  AmpsRMS = (VRMS * 1000) / mVperAmp;  // Calculate RMS current
  Wattage = (220 * AmpsRMS) - 18;  // Calculate wattage and adjust with observed offset

  String powerInfo = String(AmpsRMS) + " Amps RMS, " + String(Wattage) + " Watts";
  server.send(200, "text/plain", powerInfo);
}

void handleLEDOnTime() {
  String ledTimes = "LED 1: " + String(ledOnTime[0]) + " s, LED 2: " + String(ledOnTime[1]) + " s, LED 3: " + String(ledOnTime[2]) + " s";
  server.send(200, "text/plain", ledTimes);
}

void toggleLEDState(int ledIndex) {
  ledStates[ledIndex] = !ledStates[ledIndex];
  digitalWrite(ledPins[ledIndex], ledStates[ledIndex]);

  if (ledStates[ledIndex]) {
    ledStartTime[ledIndex] = millis();  // Start timing
  } else {
    ledOnTime[ledIndex] += (millis() - ledStartTime[ledIndex]) / 1000;  // Calculate on-time in seconds
  }
}

float getVPP() {
  float result;
  int readValue;           // Value read from the sensor
  int maxValue = 0;        // Store max value here
  int minValue = 4095;     // Store min value here (for 12-bit ADC of ESP32)

  uint32_t start_time = millis();

  while ((millis() - start_time) < 1000) {  // Sample for 1 second
    readValue = analogRead(sensorIn);  // Read the analog value from GPIO34
    
    if (readValue > maxValue) {
      maxValue = readValue;  // Record the maximum sensor value
    }
    if (readValue < minValue) {
      minValue = readValue;  // Record the minimum sensor value
    }
  }

  // Subtract min from max to get peak-to-peak voltage
  result = ((maxValue - minValue) * 3.3) / 4095.0;  // Scale to ESP32's 12-bit ADC and reference voltage of 3.3V
  
  return result;
}

